local fzf_lua = require("fzf-lua")

local img_prev_bin = (function()
  -- (1) Load the snacks image package directly so we don't have to wait for
  -- a file with images for fzf-lua snacks.image preview integration to work
  -- (2) If our terminal supports the kitty protocol set our image previewer
  -- to `nil` as it would be prioritized by fzf-lua over snacks.image
  if require("snacks.image").supports_terminal() then
    return nil
  else
    return vim.fn.executable("ueberzug") == 1 and { "ueberzug" }
        or vim.fn.executable("chafa") == 1 and { "chafa", "--format=symbols" }
        or vim.fn.executable("viu") == 1 and { "viu", "-b" }
        or nil
  end
end)()

-- return first matching highlight or nil
local function hl_match(t)
  for _, h in ipairs(t) do
    local ok, hl = pcall(vim.api.nvim_get_hl, 0, { name = h, link = false })
    if ok and type(hl) == "table" and (hl.fg or hl.bg) then
      return h
    end
  end
end

local symbol_hls = nil -- will be generated by symbol_hl fn
local symbol_icons = {
  File          = "",
  Module        = "",
  Namespace     = "󰅩",
  Package       = "",
  Class         = "󰌗",
  Method        = "󰊕",
  Property      = "",
  Field         = "",
  Constructor   = "",
  Enum          = "",
  Interface     = "󰠱",
  Function      = "󰊕",
  Variable      = "󰀫",
  Constant      = "󰏿",
  String        = "󰊄",
  Number        = "󰎠",
  Boolean       = "󰝖",
  Array         = "",
  Object        = "󰜫",
  Key           = "󰌆",
  Null          = "Ø",
  EnumMember    = "",
  Struct        = "󰙅",
  Event         = "",
  Operator      = "󰆕",
  TypeParameter = "",
}

local symbol_hl = function(s)
  if not symbol_hls then
    symbol_hls = {}
    for k, _ in pairs(symbol_icons) do
      symbol_hls[k] = hl_match({ "CmpItemKind" .. k, "@" .. k:lower(), k })
    end
    -- fallback
    symbol_hls = vim.tbl_extend("keep", symbol_hls, {
      Object = "Label",
      Key = "Keyword",
      Array = "Directory",
      Null = "Float",
      Package = "@function",
    })
  end
  return symbol_hls[s]
end

local default_opts = {
  { "hide" },
  -- fzf_opts = { ["--tmux"] = "80%,60%", ["--border"] = "rounded" },
  fzf_bin = require("utils").is_iSH() and "sk" or nil,
  fzf_colors = function(o)
    local is_tmux = o.fzf_bin and o.fzf_bin:match("tmux") or o.fzf_opts["--tmux"]
    if is_tmux then
      return {
        true,
        bg = "-1",
        gutter = "-1",
        border = { "fg", "Comment" },
        header = { "fg", "Comment" },
        separator = { "fg", "Comment" },
        -- scrollbar = { "fg", "WarningMsg" },
      }
    else
      return true
    end
  end,
  winopts = function()
    return
    {
      -- border = { {'╭', 'IncSearch'}, {'─', 'IncSearch'}, {'╮', 'IncSearch'}, '│', '╯', '─', '╰', '│' },
      split     = "enew",
      preview   = {
        layout       = "flex",
        vertical     = "up:60%",
        scrollbar    = "float",
        scrolloff    = -1,
        flip_columns = 120,
        winopts      = { signcolumn = "yes" },
        border       = function(_, m)
          if m.type == "fzf" then
            return "border-line"
          else
            if m.layout == "down" then
              return { "", "─", "", "", "", "", "", "" }
            elseif m.layout == "up" then
              return { "", "", "", "", "", "─", "", "" }
            elseif m.layout == "left" then
              return { "│", "", "│", "│", "", "", "", "" }
            else
              return { "", "", "", "", "│", "", "│", "│" }
            end
          end
        end,
      },
      on_create = function(e)
        -- disable miniindentscope
        vim.b.miniindentscope_disable = true
        vim.keymap.set("t", "<C-\\>", "<C-\\>", { buffer = e.bufnr, nowait = true })
        vim.keymap.set("t", "<M-h>", "<M-h>", { buffer = e.bufnr, nowait = true })
        vim.keymap.set("t", "<C-r>", [['<C-\><C-N>"'.nr2char(getchar()).'pi']],
          { buffer = e.bufnr, expr = true })
      end,
    }
  end,
  hls = { title = "PmenuSel", title_flags = "MiniStatusLineModeOther" },
  -- hls = function()
  --   return {
  --     border = hl_match({ "FloatBorder", "LineNr" }),
  --     preview_border = hl_match({ "FloatBorder", "LineNr" }),
  --     cursorline = "Visual",
  --     -- cursorlinenr = "Visual",
  --     dir_icon = hl_match({ "NightflyGreyBlue", "Directory" }),
  --   }
  -- end,
  previewers = {
    bat = { theme = "Coldark-Dark", args = "--color=always --style=default" },
    builtin = {
      -- toggle_behavior   = "extend",
      title_fnamemodify = function(s) return s end,
      ueberzug_scaler   = "cover",
      extensions        = {
        ["gif"]  = img_prev_bin,
        ["png"]  = img_prev_bin,
        ["jpg"]  = img_prev_bin,
        ["jpeg"] = img_prev_bin,
        ["svg"]  = { "chafa" },
      }
    },
  },
  actions = {
    files = {
      true,
      ["ctrl-l"] = { fn = fzf_lua.actions.arg_add, exec_silent = true },
    },
  },
  -- all providers inherit from defaults, easier than to set this individually
  -- for git diff, commits and bcommits (we have an override for lsp.code_actions)
  defaults = { formatter = { "path.dirname_first", v = 2 } },
  buffers = { no_action_zz = true },
  files = { fzf_opts = { ["--tiebreak"] = "end" } },
  grep = {
    fzf_opts = { ["--history"] = vim.fs.joinpath(vim.fn.stdpath("data"), "fzf_search_hist") },
  },
  blines = {
    { "ivy", "hide" },
    fzf_opts = { ["--history"] = vim.fs.joinpath(vim.fn.stdpath("data"), "fzf_blines_hist") },
  },
  git = {
    blame = { { "ivy", "hide" } },
    branches = {
      -- cmd_add = { "git", "checkout", "-b" },
      cmd_del = { "git", "branch", "--delete", "--force" },
    },
  },
  treesitter = { { "ivy", "hide" } },
  lsp = {
    finder = {
      { "ivy", "hide" },
      providers = {
        { "definitions",     prefix = fzf_lua.utils.ansi_codes.green("def ") },
        { "declarations",    prefix = fzf_lua.utils.ansi_codes.magenta("decl") },
        { "implementations", prefix = fzf_lua.utils.ansi_codes.green("impl") },
        { "typedefs",        prefix = fzf_lua.utils.ansi_codes.red("tdef") },
        { "references",      prefix = fzf_lua.utils.ansi_codes.blue("ref ") },
        { "incoming_calls",  prefix = fzf_lua.utils.ansi_codes.cyan("in  ") },
        { "outgoing_calls",  prefix = fzf_lua.utils.ansi_codes.yellow("out ") },
      },
    },
    document_symbols = {
      { "ivy", "hide" },
      -- locate = true,
      path_shorten = 1,
      symbol_icons = symbol_icons,
      symbol_hl = symbol_hl,
    },
    workspace_symbols = {
      path_shorten = 1,
      symbol_icons = symbol_icons,
      symbol_hl = symbol_hl,
    },
    code_actions = {
      { "border-fused" },
      winopts = {
        relative = "cursor",
        row      = 1,
        col      = 0,
        height   = 0.4,
        preview  = { vertical = "down:70%" }
      },
      previewer = vim.fn.executable("delta") == 1 and "codeaction_native" or nil,
      preview_pager = "delta --width=$COLUMNS --hunk-header-style=omit --file-style=omit",
    },
  },
  diagnostics = { file_icons = false, diag_source = true },
  awesome_colorschemes = {
    actions = { ["ctrl-r"] = false, ["ctrl-d"] = { fn = fzf_lua.actions.cs_update, reload = true }
    }
  },
  builtin = { { "border-fused" } },
  spell_suggest = { { "default" } },
  dir_icon = "",
}

return {
  setup = function()
    -- NOT NEEDED since fzf-lua commit 604eadf
    -- custom devicons setup file to be loaded when `multiprocess = true`
    -- fzf_lua.config._devicons_setup = "~/.config/nvim/lua/plugins/devicons/setup.lua"

    fzf_lua.setup(default_opts)

    -- register fzf-lua as vim.ui.select interface
    fzf_lua.register_ui_select(function(o, items)
      local min_h, max_h = 0.15, 0.70
      local preview = o.kind == "codeaction" and 0.20 or 0
      local h = (#items + 4) / vim.o.lines + preview
      if h < min_h then
        h = min_h
      elseif h > max_h then
        h = max_h
      end
      return { winopts = { height = h, width = 0.60, row = 0.40 } }
    end)

    vim.api.nvim_create_autocmd("ColorScheme", {
      callback = function() symbol_hls = nil end,
      group = vim.api.nvim_create_augroup("FzfLuaColor", { clear = true })
    })
  end
}
